@using Ferramentas.Matematica.Datas

<div class="border mx-auto my-4">

    <h5 class="text-center my-2">@TipoCalculo.ObterDescricao()</h5>

    <div class="container">
        <div class="row">
            <div class="col">
                <label for="dataInicial">Data inicial</label>
                <InputDate id="dataInicial" class="form-control" @bind-Value="DataInicial" @bind-Value:after="Calcular" />
            </div>

            @if (TipoCalculo == TipoCalculoData.Diferenca)
            {
                <div class="col">
                    <label for="dataFinal">Data final</label>
                    <InputDate id="dataFinal" class="form-control" @bind-Value="DataFinalDiferenca" @bind-Value:after="Calcular" />
                </div>
            }
            else if (TipoCalculo == TipoCalculoData.Adicionar || TipoCalculo == TipoCalculoData.Subtrair)
            {
                <div class="col">
                    <label for="diasOperacao">Dias à @(TipoCalculo == TipoCalculoData.Adicionar ? "adicionar" : "subtrair")</label>
                    <InputNumber id="diasOperacao" class="form-control" @bind-Value="DiasOperacao" @bind-Value:after="Calcular" />
                </div>
            }
        </div>

        <div class="justify-content-center d-flex mt-2">
            @switch (TipoCalculo)
            {
                case TipoCalculoData.Diferenca:
                    <h6>Diferença de @DiasDiferenca dias</h6>
                    break;
                case TipoCalculoData.Adicionar:
                    <h6>Nova data: @DataFinalAdicao</h6>
                    break;
                case TipoCalculoData.Subtrair:
                    <h6>Nova data: @DataFinalSubtracao</h6>
                    break;
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public TipoCalculoData TipoCalculo { get; set; }

    [SupplyParameterFromForm]
    private DateOnly DataInicial { get; set; } = DateOnly.FromDateTime(DateTime.Today);

    const byte diasPadrao = 10;

    private DateOnly DataFinalDiferenca { get; set; } = DateOnly.FromDateTime(DateTime.Today.AddDays(diasPadrao));
    private int DiasDiferenca { get; set; } = diasPadrao;

    private int DiasOperacao { get; set; } = diasPadrao;
    private DateOnly DataFinalAdicao { get; set; } = DateOnly.FromDateTime(DateTime.Today.AddDays(diasPadrao));
    private DateOnly DataFinalSubtracao { get; set; } = DateOnly.FromDateTime(DateTime.Today.AddDays(-diasPadrao));

    private void CalcularDiferencaDatas()
    {
        DiasDiferenca = CalculadoraDeData.CalcularDias(DataInicial, DataFinalDiferenca);
    }

    private void CalcularAdicionarDias()
    {
        DataFinalAdicao = CalculadoraDeData.SomarDias(DataInicial, DiasOperacao);
    }

    private void CalcularSubtrairDias()
    {
        DataFinalSubtracao = CalculadoraDeData.SubtrairDias(DataInicial, DiasOperacao);
    }

    private void Calcular()
    {
        switch (TipoCalculo)
        {
            case TipoCalculoData.Diferenca:
                CalcularDiferencaDatas();
                break;
            case TipoCalculoData.Adicionar:
                CalcularAdicionarDias();
                break;
            case TipoCalculoData.Subtrair:
                CalcularSubtrairDias();
                break;
            default:
                throw new ArgumentException("Tipo de cálculo inválido.");
        }
    }
}
